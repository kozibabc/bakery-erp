#!/bin/bash

###############################################################################
# üç∞ Bakery ERP v4.1 - ADD FUNCTIONAL PAGES Part 2
# Components & Products & Recipes
###############################################################################

set -e

echo "üç∞ Adding Pages Part 2/3"
echo "========================"
echo ""

###############################################################################
# COMPONENTS PAGE
###############################################################################

cat > frontend/src/pages/ComponentsPage.js << 'EOFCOMPONENTS'
import React, { useState, useEffect } from 'react';

function ComponentsPage() {
  const [components, setComponents] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [form, setForm] = useState({ name: '', type: 'RAW', unit: '–∫–≥' });

  const token = localStorage.getItem('token');

  useEffect(() => {
    fetchComponents();
  }, []);

  const fetchComponents = async () => {
    const res = await fetch('http://localhost:3000/api/components', {
      headers: { Authorization: `Bearer ${token}` }
    });
    const data = await res.json();
    setComponents(data);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    await fetch('http://localhost:3000/api/components', {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`
      },
      body: JSON.stringify(form)
    });
    
    setForm({ name: '', type: 'RAW', unit: '–∫–≥' });
    setShowForm(false);
    fetchComponents();
  };

  return (
    <div>
      <div className="card">
        <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 20}}>
          <h2>üß© –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏</h2>
          <button className="btn btn-primary" onClick={() => setShowForm(!showForm)}>
            {showForm ? '–°–∫–∞—Å—É–≤–∞—Ç–∏' : '+ –î–æ–¥–∞—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç'}
          </button>
        </div>

        {showForm && (
          <form onSubmit={handleSubmit} style={{marginBottom: 20, padding: 20, background: '#f5f7fa', borderRadius: 8}}>
            <div style={{marginBottom: 15}}>
              <label>–ù–∞–∑–≤–∞ *</label>
              <input 
                value={form.name} 
                onChange={e => setForm({...form, name: e.target.value})} 
                placeholder="–ú—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è"
                required
              />
            </div>
            <div style={{marginBottom: 15}}>
              <label>–¢–∏–ø</label>
              <select 
                value={form.type} 
                onChange={e => setForm({...form, type: e.target.value})}
                style={{width: '100%', padding: 10, borderRadius: 5, border: '1px solid #ddd'}}
              >
                <option value="RAW">–°–∏—Ä–æ–≤–∏–Ω–∞</option>
                <option value="PACK">–£–ø–∞–∫–æ–≤–∫–∞</option>
              </select>
            </div>
            <div style={{marginBottom: 15}}>
              <label>–û–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É</label>
              <select 
                value={form.unit} 
                onChange={e => setForm({...form, unit: e.target.value})}
                style={{width: '100%', padding: 10, borderRadius: 5, border: '1px solid #ddd'}}
              >
                <option value="–∫–≥">–∫–≥</option>
                <option value="–≥">–≥</option>
                <option value="–ª">–ª</option>
                <option value="–º–ª">–º–ª</option>
                <option value="—à—Ç">—à—Ç</option>
              </select>
            </div>
            <button type="submit" className="btn btn-primary">–î–æ–¥–∞—Ç–∏</button>
          </form>
        )}

        <table style={{width: '100%', borderCollapse: 'collapse', marginTop: 20}}>
          <thead>
            <tr style={{background: '#f7fafc', borderBottom: '2px solid #e2e8f0'}}>
              <th style={{padding: 12, textAlign: 'left'}}>–ù–∞–∑–≤–∞</th>
              <th style={{padding: 12, textAlign: 'left'}}>–¢–∏–ø</th>
              <th style={{padding: 12, textAlign: 'left'}}>–û–¥–∏–Ω–∏—Ü—è</th>
            </tr>
          </thead>
          <tbody>
            {components.map(comp => (
              <tr key={comp.id} style={{borderBottom: '1px solid #e2e8f0'}}>
                <td style={{padding: 12}}>{comp.name}</td>
                <td style={{padding: 12}}>
                  {comp.type === 'RAW' && 'üåæ –°–∏—Ä–æ–≤–∏–Ω–∞'}
                  {comp.type === 'PACK' && 'üì¶ –£–ø–∞–∫–æ–≤–∫–∞'}
                </td>
                <td style={{padding: 12}}>{comp.unit}</td>
              </tr>
            ))}
          </tbody>
        </table>

        {components.length === 0 && (
          <p style={{textAlign: 'center', padding: 40, color: '#999'}}>
            –ù–µ–º–∞—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤. –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à–∏–π!
          </p>
        )}
      </div>
    </div>
  );
}

export default ComponentsPage;
EOFCOMPONENTS

###############################################################################
# PRODUCTS PAGE
###############################################################################

cat > frontend/src/pages/ProductsPage.js << 'EOFPRODUCTS'
import React, { useState, useEffect } from 'react';

function ProductsPage() {
  const [products, setProducts] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [form, setForm] = useState({ name: '', basePrice: 0 });

  const token = localStorage.getItem('token');

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    const res = await fetch('http://localhost:3000/api/products', {
      headers: { Authorization: `Bearer ${token}` }
    });
    const data = await res.json();
    setProducts(data);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    await fetch('http://localhost:3000/api/products', {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`
      },
      body: JSON.stringify(form)
    });
    
    setForm({ name: '', basePrice: 0 });
    setShowForm(false);
    fetchProducts();
  };

  return (
    <div>
      <div className="card">
        <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 20}}>
          <h2>üç∞ –¢–æ–≤–∞—Ä–∏</h2>
          <button className="btn btn-primary" onClick={() => setShowForm(!showForm)}>
            {showForm ? '–°–∫–∞—Å—É–≤–∞—Ç–∏' : '+ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä'}
          </button>
        </div>

        {showForm && (
          <form onSubmit={handleSubmit} style={{marginBottom: 20, padding: 20, background: '#f5f7fa', borderRadius: 8}}>
            <div style={{marginBottom: 15}}>
              <label>–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É *</label>
              <input 
                value={form.name} 
                onChange={e => setForm({...form, name: e.target.value})} 
                placeholder="–¢–æ—Ä—Ç –ù–∞–ø–æ–ª–µ–æ–Ω"
                required
              />
            </div>
            <div style={{marginBottom: 15}}>
              <label>–ë–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞ (–≥—Ä–Ω) *</label>
              <input 
                type="number"
                step="0.01"
                value={form.basePrice} 
                onChange={e => setForm({...form, basePrice: e.target.value})} 
                placeholder="450.00"
                required
              />
            </div>
            <button type="submit" className="btn btn-primary">–î–æ–¥–∞—Ç–∏</button>
          </form>
        )}

        <table style={{width: '100%', borderCollapse: 'collapse', marginTop: 20}}>
          <thead>
            <tr style={{background: '#f7fafc', borderBottom: '2px solid #e2e8f0'}}>
              <th style={{padding: 12, textAlign: 'left'}}>–ù–∞–∑–≤–∞</th>
              <th style={{padding: 12, textAlign: 'right'}}>–ë–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞</th>
            </tr>
          </thead>
          <tbody>
            {products.map(product => (
              <tr key={product.id} style={{borderBottom: '1px solid #e2e8f0'}}>
                <td style={{padding: 12}}>{product.name}</td>
                <td style={{padding: 12, textAlign: 'right'}}>{parseFloat(product.basePrice).toFixed(2)} –≥—Ä–Ω</td>
              </tr>
            ))}
          </tbody>
        </table>

        {products.length === 0 && (
          <p style={{textAlign: 'center', padding: 40, color: '#999'}}>
            –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤. –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à–∏–π!
          </p>
        )}
      </div>
    </div>
  );
}

export default ProductsPage;
EOFPRODUCTS

###############################################################################
# RECIPES PAGE
###############################################################################

cat > frontend/src/pages/RecipesPage.js << 'EOFRECIPES'
import React, { useState, useEffect } from 'react';

function RecipesPage() {
  const [recipes, setRecipes] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [form, setForm] = useState({ name: '' });

  const token = localStorage.getItem('token');

  useEffect(() => {
    fetchRecipes();
  }, []);

  const fetchRecipes = async () => {
    const res = await fetch('http://localhost:3000/api/recipes', {
      headers: { Authorization: `Bearer ${token}` }
    });
    const data = await res.json();
    setRecipes(data);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    await fetch('http://localhost:3000/api/recipes', {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`
      },
      body: JSON.stringify(form)
    });
    
    setForm({ name: '' });
    setShowForm(false);
    fetchRecipes();
  };

  return (
    <div>
      <div className="card">
        <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 20}}>
          <h2>üìã –†–µ—Ü–µ–ø—Ç–∏</h2>
          <button className="btn btn-primary" onClick={() => setShowForm(!showForm)}>
            {showForm ? '–°–∫–∞—Å—É–≤–∞—Ç–∏' : '+ –î–æ–¥–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç'}
          </button>
        </div>

        {showForm && (
          <form onSubmit={handleSubmit} style={{marginBottom: 20, padding: 20, background: '#f5f7fa', borderRadius: 8}}>
            <div style={{marginBottom: 15}}>
              <label>–ù–∞–∑–≤–∞ —Ä–µ—Ü–µ–ø—Ç—É *</label>
              <input 
                value={form.name} 
                onChange={e => setForm({...form, name: e.target.value})} 
                placeholder="–ë—ñ—Å–∫–≤—ñ—Ç–Ω–∏–π –∫–æ—Ä–∂"
                required
              />
            </div>
            <button type="submit" className="btn btn-primary">–î–æ–¥–∞—Ç–∏</button>
          </form>
        )}

        <table style={{width: '100%', borderCollapse: 'collapse', marginTop: 20}}>
          <thead>
            <tr style={{background: '#f7fafc', borderBottom: '2px solid #e2e8f0'}}>
              <th style={{padding: 12, textAlign: 'left'}}>–ù–∞–∑–≤–∞</th>
              <th style={{padding: 12, textAlign: 'left'}}>–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</th>
            </tr>
          </thead>
          <tbody>
            {recipes.map(recipe => (
              <tr key={recipe.id} style={{borderBottom: '1px solid #e2e8f0'}}>
                <td style={{padding: 12}}>{recipe.name}</td>
                <td style={{padding: 12}}>{new Date(recipe.createdAt).toLocaleDateString('uk-UA')}</td>
              </tr>
            ))}
          </tbody>
        </table>

        {recipes.length === 0 && (
          <p style={{textAlign: 'center', padding: 40, color: '#999'}}>
            –ù–µ–º–∞—î —Ä–µ—Ü–µ–ø—Ç—ñ–≤. –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à–∏–π!
          </p>
        )}
      </div>
    </div>
  );
}

export default RecipesPage;
EOFRECIPES

echo "‚úÖ Part 2/3 - Components, Products, Recipes —Å—Ç–≤–æ—Ä–µ–Ω–æ"
echo ""
echo "‚ñ∂Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./add-pages-part3.sh"
echo ""
